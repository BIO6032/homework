---
title: Demonstration
permalink: demonstration/
layout: page
---

# Introduction

> Do not edit this file - it is meant to serve as a template for the most
> important parts of the homework system.

A large number of organisms, typically those who reproduce asexually, have
haploid genomes, in which a single copy of every gene is present. In the absence
of recombination, it is interesting to question how diversity can be maintained.
We will set up as simple model of change of allelic frequencies in a highly
simplified context, in which organisms have a single gene, with a more
competitive allelle $A$, and a less competitive variant $a$.

## Required packages

```julia
using Plots
using Distributions
```

## Model description and justification

As the individuals in our model carry either $A$ or $a$, we can simply model the
frequency of $A$ at time $t$, called $p(t)$, and write that the frequency of $a$
is $1-p(t)$.

We further assume that the allele $A$ has a fitness of $\omega_A$, and the
allele $a$ has a fitness of $\omega_a$. Because we want to represent the fact
that $a$ is less fit than $A$, we will set $\omega_A = 1$, and $\omega_a =
(1-s)$, where $s$ is a number in $[0,1]$ representing the strength of the
selection against $a$.

The proportion of allele $A$ in the population at the next timestep is called
$p(t+1)$ -- it can be calculated based on the fitness of $A$ *relative* to the
total fitness of the population. The total fitness of the population is

$$\omega_A p(t) + \omega_a (1-p(t))$$

Therefore, the frequency of $A$ at time $t+1$ is

$$p(t+1) = \frac{\omega_A p(t)}{\omega_A p(t) + \omega_a (1-p(t))}$$

Because replication is always imperfect, we add to this model a mutation rate
$\mu$, which varies in $[0,1[$. Adding the mutations is simply a matter of
decreasing the proportion of $A$ at the next timestep (by a factor of $\mu$),
and so the final equation for the frequency of $A$ through time is

$$p(t+1) = (1-\mu)\frac{\omega_A p(t)}{\omega_A p(t) + \omega_a (1-p(t))}$$

## Model analysis

This model is a discrete time model, so it has an equilibrium every time $p(t+1)
= p(t)$. We will look a number of special cases, and then give the general
solution. For every $p$ that is an equilibrium, we will note it $\hat p$.

### Special case 1 - mo mutation

In the absence of mutation, the equilibrium exists if

$$\hat p = \frac{\omega_A \hat p}{\omega_A \hat p + \omega_a (1-\hat p)}$$

We can express this as

$$\hat p (\omega_A \hat p + \omega_a (1-\hat p)) = \omega_A \hat p}$$

which simplifies to

$$\omega_A = \omega_A \hat p + \omega_a (1-\hat p)$$

This further simplifies to

$$\omega_A - \omega_a = \hat p(\omega_A - \omega_a)$$

This can be written as

$$\hat p = \frac{\omega_A - \omega_a}{\omega_A - \omega_a} = 1 \qed$$

There is no possible polymorphism in the absence of mutation.

## Simulations

### Theoretical predictions

```julia
"""
DOC GOES HERE
"""
function hw(p::Float64=0.5)
  # TODO
  @assert 0.0 ≤ p ≤ 1.0
  # TODO
  q = 1.0 - p
  return [p*p, 2*p*q, q*q]
end
```

```julia
hw(0.5)
```

```julia
p = collect(0.0:0.05:1.0)
frequencies = hw.(p)
plot(frequencies)
```

### Stochastic simulations

## Conclusions
